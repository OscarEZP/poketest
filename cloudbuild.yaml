steps:
  # 1) Renderizar backend/app.yaml con IP privada de Redis + conector VPC
  - name: gcr.io/cloud-builders/gcloud
    id: "Render app.yaml"
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        # Intenta resolver la IP privada de Redis; si falla, usa el sustituto _REDIS_HOST (si viene)
        REDIS_HOST="$(gcloud redis instances describe "${_REDIS_INSTANCE}" --region "${_REGION}" --format='value(host)' || true)"
        if [ -z "${REDIS_HOST}" ] && [ -n "${_REDIS_HOST:-}" ]; then
          REDIS_HOST="${_REDIS_HOST}"
        fi
        if [ -z "${REDIS_HOST}" ]; then
          echo "No se pudo resolver REDIS_HOST. Revisa _REDIS_INSTANCE/_REGION o define _REDIS_HOST."
          exit 1
        fi

        sed -e "s/REDIS_HOST_PLACEHOLDER/${REDIS_HOST}/g" \
            -e "s#VPC_CONNECTOR_FULL_PLACEHOLDER#${_VPC_CONNECTOR}#g" \
            app.template.yaml > backend/app.yaml

        echo "===== backend/app.yaml ====="
        cat backend/app.yaml

  # 2) Instalar dependencias con Node 20
  - name: gcr.io/cloud-builders/node:20
    id: "npm ci"
    dir: "backend"
    entrypoint: npm
    args: ["ci", "--no-audit", "--no-fund"]

  # 3) Build
  - name: gcr.io/cloud-builders/node:20
    id: "npm run build"
    dir: "backend"
    entrypoint: npm
    args: ["run", "build"]

  # 4) Deploy a App Engine Standard
  - name: gcr.io/cloud-builders/gcloud
    id: "Deploy App Engine"
    args:
      - app
      - deploy
      - backend/app.yaml
      - --quiet
      - --project=${PROJECT_ID}

substitutions:
  _REGION: "europe-west1"
  _REDIS_INSTANCE: "app-redis"
  _VPC_CONNECTOR: "projects/maquicontrol-90a19/locations/europe-west1/connectors/app-connector"
  _REDIS_HOST: "10.100.159.43"

options:
  logging: CLOUD_LOGGING_ONLY
